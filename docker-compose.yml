services:
  db:
    image: postgres:16.4-alpine3.20
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - backend_nw
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    restart: always
    environment:
      BACKEND_SECRET_KEY: ${BACKEND_SECRET_KEY}
      BACKEND_PORT: ${BACKEND_PORT}
      BACKEND_POSTGRES_USER: ${POSTGRES_USER}
      BACKEND_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKEND_POSTGRES_DB: ${POSTGRES_DB}
      BACKEND_POSTGRES_HOST: db
      BACKEND_POSTGRES_PORT: ${POSTGRES_PORT}
      BACKEND_CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
    networks:
      - backend_nw
      - proxy_nw
    volumes:
      - static_volume:/static
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://localhost:${BACKEND_PORT}/api/health/ | grep -q 200"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  pipeline:
    build: ./data_retriever
    restart: always
    environment: 
      MAGE_DATA_DIR: ${MAGE_DATA_DIR} # in container
      PIPELINE_POSTGRES_USER: ${POSTGRES_USER}
      PIPELINE_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PIPELINE_POSTGRES_DB: ${POSTGRES_DB}
      PIPELINE_POSTGRES_HOST: db
      PIPELINE_POSTGRES_PORT: ${POSTGRES_PORT}
      PIPELINE_MYSQL_USER: ${MYSQL_USER}
      PIPELINE_MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      PIPELINE_MYSQL_DB: ${MYSQL_DB}
      PIPELINE_MYSQL_HOST: ${MYSQL_HOST}
      PIPELINE_MYSQL_PORT: ${MYSQL_PORT}
    networks:
      - backend_nw
      # - proxy_nw?
    ports:
      - "${PIPELINE_PORT}:6789"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://localhost:${PIPELINE_PORT} | grep -q 200"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 10s
    volumes:
      - ./data_retriever:/app
      # backup .mage_data with already created secrets to server or store secrets in server's mage UI during deployment
      # maybe instead of using ../mage_data we could add LOCAL_MAGE_DATA_DIR to data_retriever .env file?
      - ../.mage_data:${MAGE_DATA_DIR} 
  
  proxy:
    build: ./proxy
    restart: always
    environment:
      BACKEND_HOST: backend
      BACKEND_PORT: ${BACKEND_PORT}
    ports:
      - "${PROXY_PORT}:80"
    networks:
      - proxy_nw
    volumes:
      - static_volume:/static
    depends_on:
      backend:
        condition: service_healthy

volumes:
  postgres_data:
  static_volume:

networks:
  backend_nw:
  proxy_nw: