services:
  db:
    image: postgres:16.4-alpine3.20
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:${POSTGRES_PORT}"
    networks:
      - backend_nw
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: ./backend
    restart: always
    environment:
      BACKEND_SECRET_KEY: ${BACKEND_SECRET_KEY}
      BACKEND_PORT: ${BACKEND_PORT}
      BACKEND_POSTGRES_USER: ${POSTGRES_USER}
      BACKEND_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKEND_POSTGRES_DB: ${POSTGRES_DB}
      BACKEND_POSTGRES_HOST: db
      BACKEND_POSTGRES_PORT: ${POSTGRES_PORT}
      BACKEND_CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS}
    networks:
      - backend_nw
      - proxy_nw
    volumes:
      - static_volume:/static
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://localhost:${BACKEND_PORT}/api/health/ | grep -q 200"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
  pipeline:
    build: ./data_retriever
    restart: always
    environment: 
      MAGE_DATA_DIR: ${MAGE_DATA_DIR} 
      REQUIRE_USER_AUTHENTICATION: 1
      DEFAULT_OWNER_EMAIL: ${DEFAULT_OWNER_EMAIL}
      DEFAULT_OWNER_PASSWORD: ${DEFAULT_OWNER_PASSWORD}
      DEFAULT_OWNER_USERNAME: ${DEFAULT_OWNER_USERNAME}
      PIPELINE_PORT: ${PIPELINE_PORT}
      PIPELINE_POSTGRES_USER: ${POSTGRES_USER}
      PIPELINE_POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PIPELINE_POSTGRES_DB: ${POSTGRES_DB}
      MAGE_BASE_PATH: ${MAGE_BASE_PATH}
      PIPELINE_POSTGRES_HOST: db
      PIPELINE_POSTGRES_PORT: ${POSTGRES_PORT}
      PIPELINE_MYSQL_USER: ${MYSQL_USER}
      PIPELINE_MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      PIPELINE_MYSQL_DB: ${MYSQL_DB}
      PIPELINE_MYSQL_HOST: ${MYSQL_HOST}
      PIPELINE_MYSQL_PORT: ${MYSQL_PORT}
    networks:
      - backend_nw
      - pipeline_nw
    ports:
      - "${PIPELINE_PORT}:6789"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s -o /dev/null -w '%{http_code}' http://localhost:${PIPELINE_PORT} | grep -q 200"]
      interval: 1m30s
      timeout: 30s
      retries: 5
      start_period: 10s
    volumes:
      - ./data_retriever:/app
      - ${LOCAL_MAGE_DATA_DIR}:${MAGE_DATA_DIR} 
  frontend: 
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        -  PUBLIC_REGION_DEFAULT_ID=1
        -  PUBLIC_BACKEND_URL=${BACKEND_URL}
        -  SITE_URL=${SITE_URL}
        -  SMTP_SENDER=${SMTP_SENDER}
        -  SMTP_KEY=${SMTP_KEY}
    restart: always
    environment:
      PUBLIC_REGION_DEFAULT_ID: 1
      PUBLIC_BACKEND_URL: ${BACKEND_URL}
      FRONTEND_PORT: ${FRONTEND_PORT}
      SITE_URL: ${SITE_URL}
      SMTP_SENDER: ${SMTP_SENDER}
      SMTP_KEY: ${SMTP_KEY}
    networks:
      - frontend_nw
      - proxy_nw
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://localhost:${FRONTEND_PORT} || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s  
  proxy:
    build: 
      context: ./proxy
      target: ${ENVIRONMENT}
    restart: always
    environment:
      BACKEND_HOST: backend
      BACKEND_PORT: ${BACKEND_PORT}
      PIPELINE_HOST: ${PIPELINE_HOST}
      PIPELINE_PORT: ${PIPELINE_PORT}
      CERT_NAME: ${CERT_NAME}
      FRONTEND_HOST: frontend
      FRONTEND_PORT: ${FRONTEND_PORT}
    ports:
      - "${PROXY_PORT}:80"
      - 443:443
    networks:
      - proxy_nw
      - pipeline_nw
    volumes:
      - static_volume:/static
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:ro
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_healthy
  
  certbot:
    image: certbot/certbot:latest
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
volumes:
  postgres_data:
  static_volume:

networks:
  backend_nw:
  proxy_nw:
  pipeline_nw:
  frontend_nw:
