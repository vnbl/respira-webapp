---
import Typography from "./atoms/Typography.astro";
import { BASE_URL } from "../data/constants";
import { Dropdown, DropdownItems } from "astro-navbar";
import { Image } from "astro:assets";
import DropdownIcon from "../assets/icons/dropdown_icon.svg"
const { title, route, type } = Astro.props;

let isModal = type === "modal";
let isDropdown = type === "dropdown";
---

<script>
    import { isAlertModalOpen } from "../store/modals";

    const buttons = document.querySelectorAll("button.dialog");

    // Handle clicks on each button.
    buttons.forEach((button) => {
        button.addEventListener("click", () => {
            isAlertModalOpen.set(!isAlertModalOpen.get());
        });
    });
</script>
{
    isModal && (
        <button
            class="dialog place-content-center cursor-default hidden md:block"
            data-dialog-target="dialog"
        >
            <Typography variant="nav" customClass="m-auto select-none">
                {title}
            </Typography>
        </button>
        <a
            href={BASE_URL + route}
            class={isModal ? "md:hidden visible" : ""}
        >
            <li class="place-content-center cursor-default">
                <Typography variant="nav" customClass="m-auto select-none">
                    {title}
                </Typography>
            </li>
        </a>
    )
}

{
    !isModal &&  isDropdown && (
        <Dropdown class="group">
            <button>
            <li class="place-content-center cursor-default flex-row flex">
                <Typography variant="nav" customClass="m-auto select-none">
                    {title}
                </Typography>
                <Image
                    class="h-6 w-auto"
                    alt="Respira"
                    src={DropdownIcon}
                    loading="eager"
                />
            </li>
            </button>
            <DropdownItems  class="md:relative">
              <div class="md:absolute md:top-8 bg-base md:p-3 p-1 rounded min-w-36">
                <ul class="flex flex-col space-y-2">
                {route.loading.get() && (
                    <div class="animate-pulse flex flex-col space-y-4">
                        <div class="h-10 w-full bg-basedark rounded"></div>
                        <div class="h-10 w-full bg-basedark rounded"></div>
                        <div class="h-10 w-full bg-basedark rounded"></div>
                    </div>)
                }
                {!route.loading.get() && route.store.get()?.map((val:any) => (
                    <a href={route.baseRoute+"/"+val["id"]}>
                    <li>
                        <Typography variant="nav" >Estaci√≥n {val[route.titleKey]} </Typography>
                        <Typography variant="p-sm" >{val[route.subtitleKey]}</Typography>
                    </li>
                    </a>
                ))}
                </ul>
              </div>
            </DropdownItems>
          </Dropdown>

    )
}


{
    !isModal &&  !isDropdown && (
        <a href={BASE_URL + route} class={isModal ? "md:hidden visible" : ""} >
            <li class="place-content-center cursor-default">
                <Typography variant="nav" customClass="m-auto select-none">
                    {title}
                </Typography>
            </li>
        </a>
    )
}